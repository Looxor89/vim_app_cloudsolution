sap.ui.define([
    "./BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Sorter",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "vim_ui/utils/formatter"
], function (BaseController, JSONModel, Sorter, MessageToast, Fragment, formatter) {
    "use strict";

    return BaseController.extend("vim_ui.controller.Master", {
        formatter: formatter,

        /**
         * Initialize the controller
         * Set up router and attach the route pattern matcher.
         */
        onInit: function () {
            this.oRouter = this.getOwnerComponent().getRouter();
            this.oRouter.getRoute("master").attachPatternMatched(this._onRouteMatched, this);
            this._bDescendingSort = false;
        },

        _onRouteMatched: function () {
            // this.loadDashboard();
            this.defineModelForCurrentPage();
            this.onGoPress();
            this.resetState();
        },

        defineModelForCurrentPage: function () {
            var oModel = {
                "list": []
            }
            this.getView().setModel(new JSONModel(oModel), "masterModel");
        },

        onGoPress: function (oEvent) {
            var oView = this.getView();
            // var sFileName = oView.byId("idFilenameInp").getValue();
            var sDocStatus = oView.byId("idSelectDocStatus").getSelectedKeys();
            // var sDoxStatus = oView.byId("idSelectExtractionStatus").getSelectedKey();
            var sAssignedTo = oView.byId("idAssignedToInp").getValue();
            var sDocCategory = oView.byId("idSelectDocumentCategory").getSelectedKey();
            var sCreatedBy = oView.byId("idSentByInp").getValue();
            var sCreatedDateFrom = oView.byId("idSentOn").getDateValue();
            var sCreatedDateTo = oView.byId("idSentOn").getSecondDateValue();

            var url = "/odata/extended()?";
            var aParams = [];
            // if (sFileName) {
            //     aParams.push("FILENAME=" + sFileName);
            // }
            if (sDocStatus.length) {
                aParams.push("DOC_STATUS=" + sDocStatus);
            }
            // if (sDoxStatus) {
            //     aParams.push("DOX_STATUS=" + sDoxStatus);
            // }
            if (sAssignedTo) {
                aParams.push("ASSIGNEDTO=" + sAssignedTo);
            }
            if (sDocCategory) {
                aParams.push("DOCCATEGORY=" + sDocCategory);
            }
            if (sCreatedBy) {
                aParams.push("CREATEDBY=" + sCreatedBy);
            }
            if (sCreatedDateFrom || sCreatedDateTo) {
                aParams.push("CREATEDAT=" + sCreatedDateFrom.toJSON() + "," + sCreatedDateTo.toJSON());
            }

            var sParams = aParams.join("&");
            url = url + sParams;
            console.log(url);
            var oMasterModel = this.getView().getModel("masterModel");
            sap.ui.core.BusyIndicator.show()
            $.ajax({
                url: url,
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                    "cache": false,
                },
                dataType: "json",
                async: true,
                success: function (oData) {
                    console.log("Filtered data:", oData);
                    oMasterModel.setProperty("/list", oData.value[0].result)
                    sap.ui.core.BusyIndicator.hide()
                }.bind(this),
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error loading data " + textStatus);
                    console.log(errorThrown);

                }.bind(this)
            });
        },

        onClearFilterBar: function (oEvent) {
            var oView = this.getView();

            // oView.byId("idFilenameInp").setValue(null);
            oView.byId("idSelectDocStatus").setSelectedKeys(null);
            // oView.byId("idSelectExtractionStatus").setSelectedKey(null);
            oView.byId("idAssignedToInp").setValue(null);
            oView.byId("idSelectDocumentCategory").setSelectedKey(null);
            oView.byId("idSentByInp").setValue(null);
            oView.byId("idSentOn").setDateValue(null);
            oView.byId("idSentOn").setSecondDateValue(null);
        },

        onListItemPress: function (oEvent) {
            var packageId = oEvent.getSource().getBindingContext("masterModel").getObject().PACKAGEID;

            // this.oRouter.navTo("detailDetail", { layout: sap.f.LayoutType.TwoColumnsMidExpanded, packageId: packageId }); <-- CAP commentato in attesa di capire cosa fare
            this.oRouter.navTo("detailDetail", { layout: sap.f.LayoutType.MidColumnFullScreen, packageId: packageId });
        },

        onUnlock: function (oEvent) {

            var url = "/odata/unlock";
            // var STATUS = this.appmodel.getProperty(this.oCtx + "/DocStatus");
            var sPackageId = this.getView().getModel("masterModel").getProperty(this.oCtx + "/PACKAGEID");
            var body = {
                payload: {
                    PackageId: sPackageId
                }
            }
            if (!sPackageId) {
                MessageToast.show("ERROR - Document cannot be unlocked");
                return;
            }

            $.ajax({
                url: url,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                dataType: 'json',
                data: body ? JSON.stringify(body) : undefined,
                success: function (data) {
                    // if success means lock was removed
                    MessageToast.show("Document has been unlocked");
                },
                error: function (err) {
                    console.log("FAILED TO REMOVE LOCK", err);
                    MessageToast.show("Unable to unlock Document");
                }
            });

        },

        onQuickEditPress: function (oEvent) {
            var oControl = oEvent.getSource(),
                oView = this.getView();

            this.oCtx = oEvent.getSource().getBindingContext('masterModel');

            if (!this._oMenuFragment) {
                this._oMenuFragment = Fragment.load({
                    id: oView.getId(),
                    name: "vim_ui.view.fragments.MasterMenu",
                    controller: this
                }).then(function (oMenu) {
                    oView.addDependent(oMenu);
                    oMenu.openBy(oControl);
                    this._oMenuFragment = oMenu;
                    return this._oMenuFragment;
                }.bind(this));
            } else {
                this._oMenuFragment.openBy(oControl);
            }


        },

        onForwardPressHandler : function (oEvent) {
            var oMasterModel = this.getView().getModel("masterModel");
            var sDocStatus = oMasterModel.getProperty(this.oCtx + "/DOC_STATUS");
            var sPackage_Id = oMasterModel.getProperty(this.oCtx + "/PACKAGEID");
            this.onForwardPress(oEvent, oMasterModel, sPackage_Id, sDocStatus);
        },

        onSort: function (oEvent) {
            this._bDescendingSort = !this._bDescendingSort;
            var oView = this.getView(),
                oTable = oView.byId("productsTable"),
                oBinding = oTable.getBinding("items"),
                oSorter = new Sorter("Name", this._bDescendingSort);

            oBinding.sort(oSorter);
        }

    });
});
